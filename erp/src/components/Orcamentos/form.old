<template>
  <form @submit.prevent="save">
    <div class="row q-col-gutter-md">
      <div class="col col-xs-12">
        <div class="row q-col-gutter-md">
          <div class="col col-sm-6 col-xs-12">
            <q-select v-model="model.empresa_id" :options="empresas" label="Empresa" />
            <!-- <FormSelectWithFilter
              :options-list="empresas"
              float-label="Empresa"
              :model="model.empresa_id"
            /> -->
          </div>
          <div class="col col-sm-6 col-xs-12">
            <q-select v-model="model.cliente_id" :options="clientes" label="Cliente" />
            <!-- <FormSelectWithFilter
              :options-list="clientes"
              float-label="Clientes"
              :model="model.cliente_id"
            /> -->
          </div>
          <div class="col col-sm-4 col-xs-12">
            <q-select v-model="model.usuario_id" :options="usuarios" label="Usuário" />
            <!-- <FormSelectWithFilter
              :options-list="usuarios"
              float-label="Funcionário"
              :model="model.usuario_id"
            /> -->
          </div>
          <!-- <div class="col col-sm-4 col-xs-12">
            <q-input
              mask="#.##"
              fill-mask="0"
              reverse-fill-mask
              prefix="R$"
              v-model="model.valor_total"
              label="Valor Total"
              helper="caso tenha negociado um valor fechado"
            />
          </div> -->
          <!-- <div class="col col-sm-4 col-xs-12">
            <q-input
              v-model="model.data_emissao"
              label="Data de Emissão"
              data-vv-name="Data de Emissão"
              v-validate="'required'"
              :error="errors.has('Data de Emissão')"
              :error-message="errors.first('Data de Emissão')"
            >
              <template v-slot:append>
                <q-icon
                  name="fa fa-calendar"
                  class="cursor-pointer"
                >
                  <q-popup-proxy
                    transition-show="scale"
                    ref="qDateProxy"
                    transition-hide="scale"
                  >
                    <q-date
                      today-btn
                      mask="DD/MM/YYYY"
                      v-model="model.data_emissao"
                      @input="() => $refs.qDateProxy.hide()"
                    />
                  </q-popup-proxy>
                </q-icon>
              </template>
            </q-input>
          </div> -->
          <!-- <div class="col col-sm-4 col-xs-12">
            <q-select
              emit-value
              map-options
              :options="vantagens"
              v-model="model.vantagens"
              label="Exibir as Vantagens no Orçamento"
              data-vv-name="Exibir as Vantagens no Orçamento"
              v-validate="'required'"
              :error="errors.has('Exibir as Vantagens no Orçamento')"
              :error-message="errors.first('Exibir as Vantagens no Orçamento')"
            />
          </div>
          <div class="col col-sm-8 col-xs-12">
            <q-select
              emit-value
              map-options
              :options="status"
              v-model="model.status"
              label="Status do Orçamento"
              data-vv-name="Status do Orçamento"
              v-validate="'required'"
              :error="errors.has('Status do Orçamento')"
              :error-message="errors.first('Status do Orçamento')"
            />
          </div> -->
        </div>
      </div>
      <div class="col col-xs-12">
        <div class="row q-col-gutter-md">
          <div class="col col-xs-6">
            <q-btn
              color="negative"
              glossy
              @click="$router.push({name:'orcamentos.index'})"
              label="Cancelar"
              icon="fa fa-times-circle"
            />
          </div>
          <div class="col col-xs-6 text-right">
            <q-btn
              type="submit"
              :loading="submitting"
              color="positive"
              glossy
              label="Salvar"
              icon="fa fa-save"
            />
          </div>
        </div>
      </div>
    </div>
  </form>
</template>

<script>
import {
  date,
  // QInput,
  QSelect,
  QBtn
  // QDate,
  // QPopupProxy,
} from 'quasar'
import _ from 'lodash'
import moment from 'moment'
// import FormSelectWithFilter from '../_Form/selectWithFilter'

export default {
  name: 'OrcamentosForm',
  props: {
    action: {
      type: String,
      default: 'new'
    },
    id: {
      type: Number,
      default: null
    }
  },
  components: {
    // FormSelectWithFilter,
    // QInput,
    QSelect,
    QBtn
    // QDate,
    // QPopupProxy,
  },
  data: () => ({
    submitting: false,
    filterCliente: '',
    model: {
      empresa_id: {},
      cliente_id: {},
      usuario_id: {}
    }
  }),
  methods: {
    getData () {
      if (this.id) {
        this.$store.dispatch('orcamentos/loadItem', this.id)
      } else {
        this.$store.commit('orcamentos/setItem', {
          empresa_id: { label: 'Selecione Empresa', value: 0 },
          cliente_id: { label: 'Selecione Cliente', value: 0 },
          usuario_id: { label: 'Selecione Usuário', value: 0 }
        })
      }
      this.$store.dispatch('empresas/loadList', {})
      this.$store.dispatch('clientes/loadList', {})
      this.$store.dispatch('usuarios/loadList', {})
      // this.$store.dispatch('vantagens/loadList', {})
      // this.$store.dispatch('status/loadList', {})
      this.setModel()
    },
    setModel () {
      this.model = this.$store.state.orcamentos.item
      if (this.model.data_emissao) {
        this.model.data_emissao = date.formatDate(
          moment(this.model.data_emissao),
          'DD/MM/YYYY'
        )
      }
      if (this.model.valor_total) {
        this.model.valor_total = parseFloat(this.model.valor_total).toFixed(2)
      }
    },
    save () {
      this.$validator.validate().then(result => {
        if (!result) {
          this.$q.notify({
            message:
                'O registro não foi salvo, verifique os campos incorretos.',
            icon: 'fa fa-exclamation-triangle'
          })
        } else {
          this.submitting = true

          let data = {
            empresa_id: this.model.empresa_id,
            cliente_id: this.model.cliente_id,
            usuario_id: this.model.usuario_id,
            valor_total: this.model.valor_total,
            data_emissao: date.formatDate(
              this.model.data_emissao,
              'YYYY-MM-DD'
            ),
            vantagens: this.model.vantagens,
            status: this.model.status
          }
          if (this.action === 'edit') {
            this.$store.dispatch('orcamentos/updateItem', {
              data: data,
              id: this.id
            })
          } else {
            this.$store.dispatch('orcamentos/saveItem', data).then(() => {
              this.$router.push({
                name: 'orcamentos.editar',
                params: { id: this.$store.state.orcamentos.currentId }
              })
            })
          }
          this.$validator.reset()
          this.submitting = false
        }
      })
    }
  },
  computed: {
    // model () {
    //   let store = this.$store.state.orcamentos.item
    //   if (store.data_emissao) {
    //     store.data_emissao = date.formatDate(
    //       moment(store.data_emissao),
    //       'DD/MM/YYYY'
    //     )
    //   }
    //   if (store.valor_total) {
    //     store.valor_total = parseFloat(store.valor_total).toFixed(2)
    //   }
    //   return store
    // },
    empresas () {
      return _.orderBy(
        this.$store.state.empresas.list.map(data => ({
          label: data.razao_social,
          value: data.id
        })),
        'label',
        'ASC'
      ).filter(data => {
        return data.label.indexOf(this.filterCliente) > -1
      })
    },
    clientes () {
      return _.orderBy(
        this.$store.state.clientes.list.map(data => ({
          label: data.razao_social,
          value: data.id
        })),
        'label',
        'ASC'
      )
    },
    usuarios () {
      return _.orderBy(
        this.$store.state.usuarios.list.map(data => ({
          label: data.nome,
          value: data.id
        })),
        'label',
        'ASC'
      )
    },
    vantagens () {
      return _.orderBy(
        this.$store.state.orcamentos.vantagensOptions,
        'label',
        'ASC'
      )
    },
    status () {
      return _.orderBy(
        this.$store.state.orcamentos.statusOptions,
        'label',
        'ASC'
      )
    }
  },
  mounted () {
    this.getData()
  }
}
</script>

<style>
</style>
